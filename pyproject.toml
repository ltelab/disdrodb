[build-system]
requires = ["setuptools>=61.0", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "disdrodb"
authors = [
	{name = "Gionata Ghiggi"},
]
description = "disdrodb provides tools to download, standardize, share and analyze global disdrometer data."
readme = "README.md"
keywords = ["python", "disdrometer","parsivel", "drop size distribution"]
classifiers = [
	"Development Status :: 1 - Planning",
	"Intended Audience :: Developers",
	"Programming Language :: Python :: 3",
	"Operating System :: Unix",
	"Operating System :: MacOS :: MacOS X",
	"Operating System :: Microsoft :: Windows",
]
requires-python = ">=3.9"
dependencies = [
	"click",
	"tqdm",
	"pooch",
	"donfig",
	"requests",
	"PyYAML",
	"trollsift",
	"netCDF4",
	"pyarrow",
	"pandas",
    "numpy",
    "scipy",
	"dask[distributed]",
	"xarray",

]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
	"jupyter",
	"pre-commit",
	"pytest",
	"pydantic>=2.0.0", # requirement? l0/check_configs
	"pytest-cov",
	"pytest-mock",
	"requests-mock",
	"setuptools",
	"build",
	"twine",
	"loghub",
]

[project.urls]
homepage = "https://github.com/ltelab/disdrodb"
repository = "https://github.com/ltelab/disdrodb"
source = "https://github.com/ltelab/disdrodb"
tracker = "https://github.com/ltelab/disdrodb/issues"
documentation = "https://disdrodb.readthedocs.io"
changelog = "https://github.com/ltelab/disdrodb/blob/main/CHANGELOG.md"

[tool.setuptools_scm]
write_to = "disdrodb/_version.py"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
include = ["disdrodb*"]

[project.scripts]
# Initialization
disdrodb_initialize_station="disdrodb.cli.disdrodb_initialize_station:disdrodb_initialize_station"
disdrodb_data_archive_directory="disdrodb.cli.disdrodb_data_archive_directory:disdrodb_data_archive_directory"
disdrodb_metadata_archive_directory="disdrodb.cli.disdrodb_metadata_archive_directory:disdrodb_metadata_archive_directory"

# Metadata archive
disdrodb_download_metadata_archive="disdrodb.cli.disdrodb_download_metadata_archive:disdrodb_download_metadata_archive"
disdrodb_check_metadata_archive="disdrodb.cli.disdrodb_check_metadata_archive:disdrodb_check_metadata_archive"
# Open directories
disdrodb_open_metadata_archive="disdrodb.cli.disdrodb_open_metadata_archive:disdrodb_open_metadata_archive"
disdrodb_open_data_archive="disdrodb.cli.disdrodb_open_data_archive:disdrodb_open_data_archive"
disdrodb_open_logs_directory="disdrodb.cli.disdrodb_open_logs_directory:disdrodb_open_logs_directory"
disdrodb_open_metadata_directory="disdrodb.cli.disdrodb_open_metadata_directory:disdrodb_open_metadata_directory"
disdrodb_open_product_directory="disdrodb.cli.disdrodb_open_product_directory:disdrodb_open_product_directory"
disdrodb_open_readers_directory="disdrodb.cli.disdrodb_open_readers_directory:disdrodb_open_readers_directory"
# Data transfer
disdrodb_download_archive="disdrodb.cli.disdrodb_download_archive:disdrodb_download_archive"
disdrodb_download_station="disdrodb.cli.disdrodb_download_station:disdrodb_download_station"
disdrodb_upload_archive="disdrodb.cli.disdrodb_upload_archive:disdrodb_upload_archive"
disdrodb_upload_station="disdrodb.cli.disdrodb_upload_station:disdrodb_upload_station"
# L0A
disdrodb_run_l0a_station="disdrodb.cli.disdrodb_run_l0a_station:disdrodb_run_l0a_station"
disdrodb_run_l0a="disdrodb.cli.disdrodb_run_l0a:disdrodb_run_l0a"
# L0B
disdrodb_run_l0b_station="disdrodb.cli.disdrodb_run_l0b_station:disdrodb_run_l0b_station"
disdrodb_run_l0b="disdrodb.cli.disdrodb_run_l0b:disdrodb_run_l0b"
# L0C
disdrodb_run_l0c_station="disdrodb.cli.disdrodb_run_l0c_station:disdrodb_run_l0c_station"
disdrodb_run_l0c="disdrodb.cli.disdrodb_run_l0c:disdrodb_run_l0c"
# L0
disdrodb_run_l0_station="disdrodb.cli.disdrodb_run_l0_station:disdrodb_run_l0_station"
disdrodb_run_l0="disdrodb.cli.disdrodb_run_l0:disdrodb_run_l0"
# L1
disdrodb_run_l1_station="disdrodb.cli.disdrodb_run_l1_station:disdrodb_run_l1_station"
disdrodb_run_l1="disdrodb.cli.disdrodb_run_l1_station:disdrodb_run_l1_station"
# L2E
disdrodb_run_l2e_station="disdrodb.cli.disdrodb_run_l2e_station:disdrodb_run_l2e_station"
disdrodb_run_l2e="disdrodb.cli.disdrodb_run_l2e_station:disdrodb_run_l2e_station"
# L2M
disdrodb_run_l2m_station="disdrodb.cli.disdrodb_run_l2m_station:disdrodb_run_l2m_station"
disdrodb_run_l2m="disdrodb.cli.disdrodb_run_l2m_station:disdrodb_run_l2m_station"


[tool.pytest.ini_options]
addopts = "--cov --cov-report term-missing --cov-report xml --cov-report lcov:lcov.info"

[tool.black]
line-length = 120
preview = true

[tool.ruff]

line-length = 120
indent-width = 4

# Addional file to be formatted by ruff (in addition to *py)
extend-include = ["*.ipynb"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "docs",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]

select = [
	# pydocstyle
    "D",
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-quotes
    "Q",
    # flake8-bugbear
    "B",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-raise
    "RSE",
    # flake8-pytest-style
    "PT",
    # flake8-simplify
    "SIM",
    # Perflint
    "PERF",
    # pandas-vet
    "PD",
    # pylint
    "PL",
    # flake8-commas
    "COM",
    # flake8-slots
    "SLOT",
    # flake8-comprehensions
    "C4",
    # Ruff custom rules
    "RUF"

    #---------------------
    #### Future rules ####
    # flake8-use-pathlib
    # "PTH",
    # NumPy-specific rules  (for 2.0)
    # "NPY",
    # refurb
    # "FURB", # require preview
]
ignore = [
    "E722",
    "PT011", # pytest raised error must be checked if match the expected error msg
    "PERF203",
	"PLW2901",
    "B904",
	"RET504",
    "PD901",
    # Docstyle Rules
    "D100", # Missing docstring in public module
    "D404", # Docstring can't start with "This"
    "D401", # First sentence must be in imperative mood

    # Complexity rules
    "PLR0913",
    "PLR2004",
    "PLR0912",
    "PLR0915",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]

# Ignore `E402` (import violations) in all Jupyter Notebooks.
"*.ipynb" = ["E402"]

# Rules to ignore in test files
"test_*.py" = [
    "ARG",  # avoid problems with fixtures
    "D101","D102", "D103", "D104", "D105",  # Missing docstrings
]
"conftest.py" = [
     "D101","D102", "D103", "D104", "D105",
]
"*__init__.py" = ["D104"]

[tool.doc8]
ignore-path = [
    "docs/build",
    "docs/api/generated",
    "docs/_templates",
    "docs/tutorials",
    "docs/examples",
]
file-encoding = "utf8"
max-line-length = 120
ignore = ["D001"]

[tool.codespell]
ignore-words-list = "nd,mis,thi"

[tool.coverage.run]
omit = [
  "disdrodb/l0/readers/*",
  "disdrodb/l0/manuals/*",
]
